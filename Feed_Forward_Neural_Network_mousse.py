import numpy as np

n_x_m = 8
n_h_m = 9
n_h2_m = 15
n_y_m = 4
W1_shape = (9,8)
W2_shape = (15,9)
W3_shape = (4,15)

def get_weights_from_encoded_m(individual):
    W1 = individual[0:W1_shape[0] * W1_shape[1]]
    W2 = individual[W1_shape[0] * W1_shape[1]:W2_shape[0] * W2_shape[1] + W1_shape[0] * W1_shape[1]]
    W3 = individual[W2_shape[0] * W2_shape[1] + W1_shape[0] * W1_shape[1]:]
    return (
    W1.reshape(W1_shape[0], W1_shape[1]), W2.reshape(W2_shape[0], W2_shape[1]), W3.reshape(W3_shape[0], W3_shape[1]))


def softmax_m(z):
    s = np.exp(z.T) / np.sum(np.exp(z.T), axis=1).reshape(-1, 1)

    return s


def sigmoid_m(z):
    s = 1 / (1 + np.exp(-z))

    return s


def forward_propagation_m(X, individual):
    W1, W2, W3 = get_weights_from_encoded_m(individual)

    Z1 = np.matmul(W1, X.T)
    A1 = np.tanh(Z1)
    Z2 = np.matmul(W2, A1)
    A2 = np.tanh(Z2)
    Z3 = np.matmul(W3, A2)
    A3 = softmax_m(Z3)
    return A3
def forward_propagation_m_trained(X):
    W1=np.array([[-0.53 , -0.53 , -0.61 ,  1.6  ,  0.81 ,  1.096,  0.889,  0.91 ],
       [ 0.045,  0.12 ,  1.509, -0.81 ,  0.54 ,  0.52 , -0.71 , -0.63 ],
       [-0.57 ,  0.98 ,  0.13 , -0.03 ,  0.041, -0.71 , -0.28 ,  0.56 ],
       [-0.82 , -0.9  , -0.346,  0.81 ,  0.15 , -0.55 , -0.16 , -0.45 ],
       [ 0.157, -0.74 ,  0.447, -0.95 , -0.61 ,  0.355, -0.6  , -0.52 ],
       [ 0.417,  0.62 ,  0.59 , -0.225, -0.79 , -1.643,  0.1  , -0.02 ],
       [-0.8  , -1.045, -0.91 ,  0.51 ,  0.24 ,  0.12 , -0.66 , -0.399],
       [ 0.466,  0.27 , -0.42 , -0.95 ,  0.39 ,  1.126,  0.15 , -0.69 ],
       [ 0.91 ,  0.97 , -0.62 ,  0.472,  0.48 ,  0.25 ,  0.07 , -0.88 ]])
    W2=np.array([[ 0.63 , -0.96 , -0.15 ,  0.26 , -0.66 , -0.574,  0.64 ,  0.96 ,
        -0.76 ],
       [ 0.61 ,  0.52 , -0.36 ,  0.093, -0.27 , -0.98 ,  0.631, -0.37 ,
        -0.94 ],
       [-0.49 ,  0.82 ,  1.468, -1.061, -0.62 , -0.87 , -0.35 ,  0.94 ,
         0.255],
       [-0.53 ,  0.63 , -0.47 ,  0.68 ,  0.34 ,  0.25 ,  0.21 , -0.3  ,
         0.45 ],
       [-0.065,  0.402, -0.94 , -0.37 , -0.15 , -0.26 ,  0.06 ,  0.09 ,
        -0.24 ],
       [ 0.63 ,  0.1  ,  0.15 , -0.281,  0.44 ,  0.37 ,  0.12 , -0.11 ,
        -0.327],
       [-0.32 ,  0.05 , -0.88 , -0.52 , -0.94 ,  0.05 , -0.53 ,  0.73 ,
        -0.29 ],
       [ 0.68 , -0.83 , -0.97 , -1.853,  0.632,  1.119,  0.99 ,  0.6  ,
         1.59 ],
       [ 0.22 , -0.31 ,  0.55 ,  0.128, -0.88 , -0.66 ,  0.11 , -0.48 ,
         0.69 ],
       [-0.25 ,  0.76 , -0.79 ,  0.946,  0.36 , -0.11 , -1.313, -0.28 ,
        -0.25 ],
       [ 0.03 ,  0.1  , -0.83 ,  0.8  ,  0.11 ,  0.1  , -0.01 , -1.467,
        -0.43 ],
       [ 0.92 ,  0.57 ,  1.114,  0.6  ,  0.32 , -0.32 ,  1.053,  0.67 ,
        -0.24 ],
       [-0.36 , -1.858, -0.3  ,  0.64 ,  0.79 , -0.66 ,  0.03 , -0.99 ,
         0.75 ],
       [ 0.35 , -0.35 ,  0.01 ,  0.23 ,  0.12 , -1.064,  0.39 , -0.37 ,
         0.8  ],
       [-0.91 ,  0.261,  1.688, -1.656,  0.35 , -0.95 ,  0.01 , -0.2  ,
        -0.53 ]])
    W3=np.array([[ 0.51 ,  0.89 , -0.61 , -1.051,  0.3  ,  0.27 ,  1.401, -0.68 ,
         1.157,  0.122,  0.83 , -0.64 , -0.23 , -0.42 ,  0.29 ],
       [ 0.46 , -1.096,  0.19 ,  0.18 , -0.83 ,  0.74 ,  0.084, -0.28 ,
         1.3  ,  0.57 ,  0.24 , -0.95 ,  0.243, -0.512, -1.41 ],
       [ 0.31 ,  0.18 ,  0.1  ,  0.6  ,  0.17 ,  0.28 ,  0.15 ,  0.65 ,
         0.11 ,  0.89 , -0.02 ,  0.97 ,  0.04 , -0.42 , -0.61 ],
       [ 0.17 ,  1.563, -0.07 , -0.79 , -0.65 ,  0.23 ,  0.41 , -0.05 ,
        -0.53 ,  0.17 ,  0.621, -0.06 , -0.3  , -0.53 , -1.367]])

    Z1 = np.matmul(W1, X.T)
    A1 = np.tanh(Z1)
    Z2 = np.matmul(W2, A1)
    A2 = np.tanh(Z2)
    Z3 = np.matmul(W3, A2)
    A3 = softmax_m(Z3)
    return A3