import numpy as np

n_x = 7
n_h = 9
n_h2 = 15
n_y = 3
W1_shape = (9,7)
W2_shape = (15,9)
W3_shape = (3,15)

def get_weights_from_encoded(individual):
    W1 = individual[0:W1_shape[0] * W1_shape[1]]
    W2 = individual[W1_shape[0] * W1_shape[1]:W2_shape[0] * W2_shape[1] + W1_shape[0] * W1_shape[1]]
    W3 = individual[W2_shape[0] * W2_shape[1] + W1_shape[0] * W1_shape[1]:]
    return (
    W1.reshape(W1_shape[0], W1_shape[1]), W2.reshape(W2_shape[0], W2_shape[1]), W3.reshape(W3_shape[0], W3_shape[1]))


def softmax(z):
    s = np.exp(z.T) / np.sum(np.exp(z.T), axis=1).reshape(-1, 1)

    return s


def sigmoid(z):
    s = 1 / (1 + np.exp(-z))

    return s


def forward_propagation(X):
    W1=np.array([[-9.8000000e-01,  9.1000000e-01, -1.3000000e-01,  8.9000000e-01,
         7.2000000e-01,  8.6000000e-01, -7.1000000e-01],
       [-3.7000000e-01, -1.2000000e-01, -5.0000000e-02,  5.0000000e-01,
         1.2000000e-01,  8.0000000e-01, -8.1000000e-01],
       [ 9.1000000e-01,  2.0000000e-01, -5.3000000e-01, -2.0000000e-02,
         6.9000000e-01,  3.1000000e-01, -2.5000000e-01],
       [-6.6000000e-01,  5.0000000e-01,  8.8000000e-01,  1.9000000e-01,
        -5.0000000e-02,  7.1000000e-01, -2.4000000e-01],
       [-3.0000000e-01, -4.1000000e-01,  1.0000000e-01,  1.3000000e-01,
         8.1000000e-01, -5.2000000e-01, -7.7000000e-01],
       [-8.3000000e-01,  1.0000000e-02, -4.3000000e-01, -1.8000000e-01,
        -5.9000000e-01,  3.7000000e-01, -5.3000000e-01],
       [-2.8000000e-01, -5.3000000e-01, -7.0000000e-01, -6.2000000e-01,
        -2.1000000e-01,  8.0000000e-01, -9.2000000e-01],
       [ 7.5000000e-01,  6.9000000e-01, -7.0000000e-02,  1.3000000e-01,
         2.4000000e-01, -7.4000000e-01, -9.3000000e-01],
       [ 8.9000000e-01,  3.7000000e-01,  6.8000000e-01,  8.8817842e-16,
        -4.1000000e-01, -5.6000000e-01, -6.3000000e-01]])
    W2=np.array([[ 0.56,  0.72, -0.75, -0.77,  0.29,  0.83, -0.59, -0.6 , -0.38],
       [-1.  ,  0.13,  0.21, -0.83, -0.99, -0.85, -0.09, -0.14,  0.4 ],
       [-0.24, -0.1 ,  0.7 , -0.24,  0.85, -0.64, -0.64, -0.04,  0.32],
       [ 0.12,  0.08, -0.05,  0.43, -0.2 ,  0.54,  0.03, -0.87, -0.43],
       [ 0.68,  0.17,  0.03, -0.88, -0.41,  0.37, -0.83,  0.12, -0.85],
       [-0.51, -0.93, -0.26, -0.59, -0.71,  0.58,  0.85, -0.99, -0.47],
       [ 0.05, -0.29,  0.65, -0.65, -0.3 ,  0.27,  0.21,  0.59, -0.3 ],
       [ 0.9 ,  0.29,  0.04,  0.16,  0.18,  0.08, -0.61, -0.27, -0.34],
       [-0.36, -0.4 ,  0.46,  0.57,  0.17, -0.45, -0.93, -0.09, -0.53],
       [-0.52, -0.8 , -0.5 , -0.84, -0.66,  0.01,  0.69, -0.62,  0.06],
       [-0.85, -0.58, -0.73, -0.84, -0.61, -0.09, -0.72,  0.24,  0.37],
       [ 0.29, -0.27,  0.29,  0.56, -0.17,  0.33,  0.07,  0.53,  0.5 ],
       [ 0.09, -0.53,  0.05,  0.68,  0.21, -0.26,  0.22, -0.46, -0.91],
       [-0.8 ,  0.98,  0.29, -0.47,  0.45, -0.3 ,  0.51, -0.91, -0.27],
       [ 0.5 ,  0.04,  0.34, -0.18,  0.74, -0.08,  0.95, -0.82,  0.9 ]])
    W3=np.array([[-0.15, -0.71, -0.81, -0.71,  0.14,  0.44, -0.89,  0.44, -0.56,
         0.74, -0.75, -0.53,  0.81,  0.74, -0.07],
       [-0.79, -0.68, -0.88, -0.97, -0.11, -0.77, -0.75, -0.04,  0.1 ,
         0.37, -0.29, -0.81, -0.01,  0.18,  0.91],
       [ 0.52, -0.04,  0.68,  0.73, -0.38, -0.09, -0.81, -0.63,  0.93,
        -0.4 , -0.13, -0.44,  0.51, -0.82, -0.04]])
    Z1 = np.matmul(W1, X.T)
    A1 = np.tanh(Z1)
    Z2 = np.matmul(W2, A1)
    A2 = np.tanh(Z2)
    Z3 = np.matmul(W3, A2)
    A3 = softmax(Z3)
    return A3